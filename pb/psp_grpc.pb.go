// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: psp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PspService_CreatePsp_FullMethodName = "/training.PspService/CreatePsp"
	PspService_ViewPsp_FullMethodName   = "/training.PspService/ViewPsp"
	PspService_CancelPsp_FullMethodName = "/training.PspService/CancelPsp"
)

// PspServiceClient is the client API for PspService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PspServiceClient interface {
	CreatePsp(ctx context.Context, in *PspRequest, opts ...grpc.CallOption) (*Psp, error)
	ViewPsp(ctx context.Context, in *ViewPspRequest, opts ...grpc.CallOption) (*Psp, error)
	CancelPsp(ctx context.Context, in *CancelPspRequest, opts ...grpc.CallOption) (*Empty, error)
}

type pspServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPspServiceClient(cc grpc.ClientConnInterface) PspServiceClient {
	return &pspServiceClient{cc}
}

func (c *pspServiceClient) CreatePsp(ctx context.Context, in *PspRequest, opts ...grpc.CallOption) (*Psp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Psp)
	err := c.cc.Invoke(ctx, PspService_CreatePsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pspServiceClient) ViewPsp(ctx context.Context, in *ViewPspRequest, opts ...grpc.CallOption) (*Psp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Psp)
	err := c.cc.Invoke(ctx, PspService_ViewPsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pspServiceClient) CancelPsp(ctx context.Context, in *CancelPspRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PspService_CancelPsp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PspServiceServer is the server API for PspService service.
// All implementations must embed UnimplementedPspServiceServer
// for forward compatibility.
type PspServiceServer interface {
	CreatePsp(context.Context, *PspRequest) (*Psp, error)
	ViewPsp(context.Context, *ViewPspRequest) (*Psp, error)
	CancelPsp(context.Context, *CancelPspRequest) (*Empty, error)
	mustEmbedUnimplementedPspServiceServer()
}

// UnimplementedPspServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPspServiceServer struct{}

func (UnimplementedPspServiceServer) CreatePsp(context.Context, *PspRequest) (*Psp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePsp not implemented")
}
func (UnimplementedPspServiceServer) ViewPsp(context.Context, *ViewPspRequest) (*Psp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPsp not implemented")
}
func (UnimplementedPspServiceServer) CancelPsp(context.Context, *CancelPspRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPsp not implemented")
}
func (UnimplementedPspServiceServer) mustEmbedUnimplementedPspServiceServer() {}
func (UnimplementedPspServiceServer) testEmbeddedByValue()                    {}

// UnsafePspServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PspServiceServer will
// result in compilation errors.
type UnsafePspServiceServer interface {
	mustEmbedUnimplementedPspServiceServer()
}

func RegisterPspServiceServer(s grpc.ServiceRegistrar, srv PspServiceServer) {
	// If the following call pancis, it indicates UnimplementedPspServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PspService_ServiceDesc, srv)
}

func _PspService_CreatePsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PspServiceServer).CreatePsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PspService_CreatePsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PspServiceServer).CreatePsp(ctx, req.(*PspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PspService_ViewPsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PspServiceServer).ViewPsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PspService_ViewPsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PspServiceServer).ViewPsp(ctx, req.(*ViewPspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PspService_CancelPsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPspRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PspServiceServer).CancelPsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PspService_CancelPsp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PspServiceServer).CancelPsp(ctx, req.(*CancelPspRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PspService_ServiceDesc is the grpc.ServiceDesc for PspService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PspService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training.PspService",
	HandlerType: (*PspServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePsp",
			Handler:    _PspService_CreatePsp_Handler,
		},
		{
			MethodName: "ViewPsp",
			Handler:    _PspService_ViewPsp_Handler,
		},
		{
			MethodName: "CancelPsp",
			Handler:    _PspService_CancelPsp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "psp.proto",
}
